@using TryCSharp.Infrastructure

@model TryCSharp.Models.TutorialStep

<div id="myModal" class="reveal-modal">
    <h1>Credits and Accolades</h1>
    <p>Inspired by TryRuby.org</p>

    <a class="close-reveal-modal">&#215;</a>
</div>

<div>
    
    <div class="left col instructions-panel">
        <div class="header row application-title">
            <h1>try C#</h1>
        </div>
    
        <div class="body row">
            <h2 data-bind="text: title"></h2>
            <div data-bind="html: instructions"></div>
        </div>
    
        <footer class="footer row">
            <div class="credits" data-reveal-id="myModal">credits and accolades</div>
        </footer>
    </div>

    <div class="right col terminal-container">
        <div id="term_demo"></div>
        <footer class="footer row">
            Useful Commands
            <ul>
                <li><strong>Enter</strong> → Submit code</li>
                <li><strong>Up/Down</strong> → Cycle through command history</li>
                <li>clear → Clear the editor window</li>
                <li>back → Go to previous code challenge</li>
                <li>next → Go to next code challenge</li>
            </ul>

        </footer>
    </div>
    
</div>

@section Scripts
{
    @Scripts.Render("~/bundles/knockout")
    <script src="@Url.Content("~/Scripts/knockout-es5.min.js")"></script>
    <script>
        var app;


        appViewModel = function(currentChallenge) {
            var self = this;

            self.title = ko.observable(currentChallenge.Title);
            self.instructions = ko.observable(currentChallenge.Instructions);
            self.level = ko.observable(currentChallenge.Level);
            self.challenge = ko.observable(currentChallenge.Challenge);

            self.moveNext = function() {
                self.move('Next');
            };

            self.moveBack = function() {
                self.move('Previous');
            };

            self.move = function(action) {
                var nextUrl = '/Levels/' + this.level() + '/Challenges/' + this.challenge() + '/' + action;
                $.ajax({
                    type: 'post',
                    url: nextUrl,
                })
                    .done(function(data) {
                        self.title(data.Title);
                        self.instructions(data.Instructions);
                        self.level(data.Level);
                        self.challenge(data.Challenge);
                    });
            };


            //self.challenge = new challengeViewModel(currentChallenge.Title, currentChallenge.Instructions);
        };

        $(function() {

            var data = @Html.Raw(Model.ToJson());

            ko.applyBindings(app = new appViewModel(data));

            //$.ajax({
            //    type: 'post',
            //    url: '/Levels'
            //}).done(function(data) {
            //    //var model = data;
            //    //console.log(model);
            //    //ko.track(model);
            //    //ko.applyBindings(model);

            //    ko.applyBindings(app = new appViewModel(data));
            //    //new appViewModel(data);

            //});

            // next command
            // previous command

        });

        jQuery(function($, undefined) {
            $('#term_demo').terminal(function(command, term) {
                if (command !== '') {
                    if (command === 'next') {
                        app.moveNext();
                    } else if (command === 'back') {
                        app.moveBack();
                    } else {

                        $.ajax({
                            type: 'post',
                            url: '/Levels/' + app.level() + '/Challenges/' + app.challenge(),
                            data: { 'command': command }
                        })
                            .done(function(msg) {
                                if (msg.result) {
                                    term.echo(msg.result);
                                }

                                if (msg.result_set) {
                                    term.echo(msg.result_set);
                                }
                            });
                    }


                }


                //if (command !== '') {
                //    try {
                //        var result = window.eval(command);
                //        if (result !== undefined) {
                //            term.echo(new String(result));
                //        }
                //    } catch(e) {
                //        term.error(new String(e));
                //    }
                //} else {
                //    term.echo('');
                //}
            }, {
                greetings: '',
                //greetings: 'Javascript Interpreter',
                name: 'js_demo',
                height: 400,
                prompt: '> '
            });
        });

        $(document).ready(function() {
            $('.credits').click(function(e) {
                e.preventDefault();
                $('#myModal').reveal();
            });
        });
    </script>
}